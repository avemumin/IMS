
<div class="form-group">
    <label for="search">@Label</label>
    <input type="text"
           class="form-control"
           @bind-value="userInput"
           @bind-value:event="oninput"
           @onkeyup="OnPressKeys" />
</div>

@if (searchResult != null && searchResult.Any())
{
    <div class="search-result">
        <ul>
            @{
                var itemIndex = 0;
                foreach (var item in searchResult)
                {
                    <li @key="@item.Id"
                        class="@(itemIndex == currentItemIndex ? "selected":"")"
                        @onclick="@(() => OnSelectItem(item))">
                        @item.Name

                    </li>
                    itemIndex++;
                }
            }
        </ul>
    </div>
}
@code {

    [Parameter]
    public string Label { get; set; } = string.Empty;
    [Parameter]
    public Func<string, List<ItemViewModel>>? SearchFunction { get; set; }
    [Parameter]
    public EventCallback<ItemViewModel> OnItemSelected { get; set; }
    private List<ItemViewModel>? searchResult = null;

    private ItemViewModel? selectedItem = null;

    private ItemViewModel? currentItem = null;
    private int currentItemIndex = -1;

    private string _userInput = string.Empty;

    public string userInput
    {
        get => _userInput;
        set
        {
            _userInput = value;
            if (!string.IsNullOrWhiteSpace(_userInput) && SearchFunction != null)
            {
                if (selectedItem?.Name != _userInput)
                {
                    searchResult = SearchFunction(_userInput);
                    selectedItem = null;
                }
            }
            else
            {
                ClearSelection();
            }
        }
    }

    private void OnPressKeys(KeyboardEventArgs e)
    {
        switch (e.Code)
        {
            case "ArrowDown" or "ArrowUp" when searchResult != null && searchResult.Any():
                switch (e.Code)
                {
                    case "ArrowDown" when currentItemIndex < searchResult.Count - 1:
                        currentItem = searchResult[++currentItemIndex];
                        break;
                    case "ArrowUp" when currentItemIndex > 0:
                        currentItem = searchResult[--currentItemIndex];
                        break;
                    case "ArrowUp":
                        currentItem = null;
                        currentItemIndex = -1;
                        break;
                }
                break;
            case "Enter":
            case "NumpadEnter":
                OnSelectItem(currentItem);
                break;
        }
    }

    private void ClearSelection()
    {
        searchResult = null;
        currentItem = null;
        currentItemIndex = -1;
    }
    private void OnSelectItem(ItemViewModel? item)
    {
        ClearSelection();
        if (item == null) return;
        selectedItem = item;
        userInput = item.Name;
        OnItemSelected.InvokeAsync(item);
    }
    public class ItemViewModel
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
    }
}
