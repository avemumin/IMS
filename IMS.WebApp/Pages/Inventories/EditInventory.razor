@page "/editinventory/{InvId:int}"

@inject NavigationManager NavigationManager
@inject IViewInventoryByIdUseCase ViewInventoryByIdUseCase
@inject IEditInventoryUseCase EditInventoryUseCase

<h3>EditInventory</h3>

<br />
<EditForm Model="_inventory" OnValidSubmit="SaveInventory">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>
    <div class="form-group">
        <label for="name">Inventory Name</label>
        <InputText id="name"
                   @bind-Value="_inventory.InventoryName"
                   class="form-control">
        </InputText>
    </div>
    <div class="form-group">
        <label for="quantity">Quantity</label>
        <InputNumber id="quantity"
                     @bind-Value="_inventory.Quantity"
                     class="form-control">
        </InputNumber>
    </div>
    <div class="form-group">
        <label for="price">Price</label>
        <InputNumber id="price"
                     @bind-Value="_inventory.Price"
                     class="form-control">
        </InputNumber>
    </div>
    <br />
    <button type="submit"
            class="btn btn-primary">
        Save
    </button>
    
    <button type="button"
            class="btn btn-warning"
            @onclick="Cancel">Cancel</button>
</EditForm>

@code {
    [Parameter]
    public int InvId { get; set; }

    private Inventory _inventory = new  Inventory();

    protected override async Task OnParametersSetAsync()
    {
        _inventory = await ViewInventoryByIdUseCase.ExecuteAsync(InvId);
    }

    private async Task SaveInventory()
    {
        await EditInventoryUseCase.ExecuteEditAsync(_inventory);
        NavigationManager.NavigateTo("/inventories");
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/inventories");
    }
}
