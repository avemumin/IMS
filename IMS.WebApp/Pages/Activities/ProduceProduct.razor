@page "/produce"

@inject IViewProductsByNameUseCase ViewProductsByNameUseCase
@inject IViewProductByIdUseCase ViewProductByIdUseCase
@inject IProduceProductUseCase ProduceProductUseCase

@inject IJSRuntime JSRuntime

<h3>Produce Product</h3>

<br/>
<EditForm id="produce-form" Model="produceViewModel" OnValidSubmit="Produce">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="po">Production #</label>
        <InputText id="po"
                   @bind-Value="produceViewModel.ProductionNumber"
                   class="form-control">

        </InputText>

    </div>
    <br />
    <div class="card">
        <div class="card-body">
            <div class="form-group">
                <AutoCompleteComponent Label="Product to Produce"
                                       SearchFunction="SearchProduct"
                                       OnItemSelected="OnItemSelected">
                </AutoCompleteComponent>
                <input type="hidden" value="@produceViewModel.ProductId" />
                
            </div>
        </div>
    </div>
    <br />
    <div class="form-group">
        <label for="qty">Quantity</label>
        <InputNumber id="qty"
                     @bind-Value="produceViewModel.QunatityToProduct"
                     class="form-control">

        </InputNumber>

    </div>
    <br />

    <button type="submit" class="btn btn-primary">
        Purchase
    </button>
</EditForm>
@code {
    private ProduceViewModel produceViewModel = new ProduceViewModel();
    private Product selectedProduct = null;


    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            JSRuntime.InvokeVoidAsync("PreventFormSubmition", "produce-form");
        }
    }


    private async Task OnItemSelected(ItemViewModel item)
    {
        selectedProduct = await ViewProductByIdUseCase.ExecuteAsync(item.Id);
        produceViewModel.ProductId = item.Id;
        produceViewModel.Product = selectedProduct;
    }
    private List<ItemViewModel>? SearchProduct(string name)
    {
        var list = ViewProductsByNameUseCase.ExecuteAsync(name).GetAwaiter().GetResult();

        if (list == null) return null;
        return list.Select(x => new ItemViewModel { Id = x.ProductId, Name = x.ProductName })?.ToList();
    }

    private async Task Produce()
    {
       await ProduceProductUseCase.ExecuteAsync(produceViewModel.ProductionNumber,selectedProduct, produceViewModel.QunatityToProduct,"XYZ");

    }
}
